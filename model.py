"""In this module, we ask you to define your pricing model, in Python."""

# import packages 
import pickle
import numpy as np
import pandas as pd
import lightgbm as lgb
from sklearn.tree import DecisionTreeRegressor
from ngboost import NGBRegressor

# TODO: import your modules here.
# Don't forget to add them to requirements.txt before submitting.



# Feel free to create any number of other functions, constants and classes to use
# in your model (e.g., a preprocessing function).

dict_dc = {'pol_coverage': {'Max': 0, 'Min': 1, 'Med1': 2, 'Med2': 3},
 'pol_pay_freq': {'Quarterly': 0, 'Yearly': 1, 'Biannual': 2, 'Monthly': 3},
 'pol_payd': {'No': 0, 'Yes': 1},
 'pol_usage': {'WorkPrivate': 0,
  'Professional': 1,
  'Retired': 2,
  'AllTrips': 3},
 'drv_sex1': {'M': 0, 'F': 1},
 'drv_drv2': {'No': 0, 'Yes': 1},
 'drv_sex2': {'M': 0, '0': 1, 'F': 2},
 'vh_make_model': {'ngpgrthcqiirdsux': 0,
  'esvszhlxzbxeecme': 1,
  'vnxfpyxuciadydrl': 2,
  'smynsodmtrrubpqq': 3,
  'lybpmhaivmaqtmsq': 4,
  'ayeiibefzqqbyksg': 5,
  'gpclrtlzecazeeev': 6,
  'oeexhaebfkkjfpff': 7,
  'tdgkjlphosocwbgu': 8,
  'wqsapwecaqwzorqn': 9,
  'dvshwarqhxfcgwfd': 10,
  'synvsxhrexuyxpre': 11,
  'lxjkslpwiofoynao': 12,
  'zayyxxzvekzuooyq': 13,
  'llkwlxfjdmrqmdgq': 14,
  'lhamctzhosdtmdix': 15,
  'nhoebceeiacnmvym': 16,
  'rqklbykswxeuovdn': 17,
  'tsfyxgkwdidzgzpg': 18,
  'mdqyvrtwekmeflye': 19,
  'mpnamiwsqkvamhfa': 20,
  'abipwhwqnzenjxfn': 21,
  'selnccftdsqbiurb': 22,
  'pheduvdlnmrchihf': 23,
  'mtcsefxrgtfdqous': 24,
  'jiyhnfvmyyrpnzyx': 25,
  'owkiszjuntmwilff': 26,
  'tjvewbsfsiqtqttp': 27,
  'dsqmtbudvjtnnjwq': 28,
  'xewlloxrajhpbuwy': 29,
  'avrwlknteymnpjpk': 30,
  'pvrjjyumueakzstw': 31,
  'qqmkwgdqaimwcbxo': 32,
  'jkwlqsmedtplrvtj': 33,
  'baqjsealekltnrgg': 34,
  'iknapxqudqotqiig': 35,
  'nyrtstlobluggnkw': 36,
  'zydfvjqmmwhyfuyy': 37,
  'eslneidrjqwzpqhd': 38,
  'bqcnaxkvbmfieysy': 39,
  'yqrgxthbbzmruvwy': 40,
  'xaklvfxsplowrglp': 41,
  'suajnmrxuunoyngf': 42,
  'cxvltpchlhlatjkb': 43,
  'celpzeaubkxaxxbx': 44,
  'szluwlsqbkcnchxg': 45,
  'zhzmkwjsrgvudmmw': 46,
  'jancrvhjhcbxreda': 47,
  'ibjlpnapcnsmgugu': 48,
  'cnvpgiyrcrbsvtxo': 49,
  'lwhjrctubjkbhzmu': 50,
  'frdityocokfyohoa': 51,
  'szduoosmrfqduakm': 52,
  'usmpkujeknoxdqrc': 53,
  'cqdmtwkacajclcml': 54,
  'tsufyplsxyqgndsw': 55,
  'wlttiymytfacsrli': 56,
  'tpzzxliudfwqpopv': 57,
  'adgfkcvmsaxxghoc': 58,
  'ablxjgbyowxrfxed': 59,
  'lpwtmtiwkgbwhufg': 60,
  'skwelgffvlzgmbro': 61,
  'tdldeeccsirqwpcj': 62,
  'yxzgvihpyqafgdmy': 63,
  'urbnjdherequimyo': 64,
  'bgqrpfiflzijywyu': 65,
  'cpixpqtyjwdgmldj': 66,
  'ttcbkakfxnfsllyq': 67,
  'huoicgalccftwyvz': 68,
  'ofrkezlcbbluncri': 69,
  'dllcylnkzeegtsgr': 70,
  'pfwcfdvpkuyucnkn': 71,
  'uotpflqyvprslxjc': 72,
  'jtedxzwqoodxzcaq': 73,
  'vjxfnjqgvugwjhia': 74,
  'tzsnmmekuhggblhv': 75,
  'nhwgapjtnadqqaul': 76,
  'ptaxsjwbissrpvdm': 77,
  'xbhnetrbyfixuzmj': 78,
  'aifsqdniwqmcuqpv': 79,
  'ufqiiuoxasjwxqbf': 80,
  'uwqsodousnydlsud': 81,
  'kqxycgbergacgcei': 82,
  'jjycmklnkdivnypu': 83,
  'coufviypetbrtevy': 84,
  'lqqciehjjdtelpwa': 85,
  'elvboiqxkxwhtgzg': 86,
  'aewtdnpoiopumymt': 87,
  'onzjhhtppsfaiacz': 88,
  'whcqrtwarljaqocm': 89,
  'vzinjyeuiebqjmep': 90,
  'iljhlfeengkciosq': 91,
  'qzkbvcycbyxrgbqk': 92,
  'dychjlsxfaurgode': 93,
  'qachmbxcslsazphb': 94,
  'wyqgeeclrqbihfpk': 95,
  'bxksiwcqwmxjcbci': 96,
  'ggidexivtrafqwem': 97,
  'qxnyigoiwisibpko': 98,
  'fzcjreusldmxavjy': 99,
  'txcfordzmkkiicwu': 100,
  'oqbjvmfvjonftdxi': 101,
  'quslbttvcitxzeiy': 102,
  'godkpvbnbdeseoct': 103,
  'fliymzbupomtmyry': 104,
  'bxzfdlphpiwyjeys': 105,
  'ehapkksqqcbofeid': 106,
  'kfvusykzaeetiqtt': 107,
  'qppmxxfbqiiallmp': 108,
  'mmfquhvxcmjcvmhz': 109,
  'jlibzlturkpyjavf': 110,
  'anqyvxqouldudiww': 111,
  'cjcthmigqkejxuzi': 112,
  'rthsjeyjgdlmkygk': 113,
  'fvflhdedljqrcqle': 114,
  'pyykjiriqrhjduly': 115,
  'hotinomqpajebeov': 116,
  'gvordmjbkxszftsl': 117,
  'tduddcyerrjazjsh': 118,
  'rulqevsymrlwrsrz': 119,
  'ajvhjkzguyeszaqp': 120,
  'bgbhznmwwidntzab': 121,
  'tgfhgapnsxiewemd': 122,
  'txgvnaysouvjtkrb': 123,
  'mjwrreshlbmzkwmc': 124,
  'dyzvyrmcdyybbddd': 125,
  'uclvvrkbezlvaulu': 126,
  'rrlvhbnzrdtphqnl': 127,
  'kbgblyclstrmicux': 128,
  'cxxzogxxkmkjwqui': 129,
  'rguedwefqmzdxowu': 130,
  'zspzyfdefowgwddf': 131,
  'hywzsmogbhnfcaxk': 132,
  'xcvdausiwfrjukgn': 133,
  'jakvzvdollijyhwm': 134,
  'ygqjgwzgeierkcpj': 135,
  'xsonelzsqbpcodxe': 136,
  'fuwhdjmdexrstmmo': 137,
  'uudtrowerqhfztjo': 138,
  'ezjnsjxvhnocwwix': 139,
  'dqmsefrpxrwielmk': 140,
  'gjbalugsikirqoam': 141,
  'epbwnmcyogpybxlm': 142,
  'spqqpwucqcaspwkb': 143,
  'mcloznejvtelpcan': 144,
  'qwcrrrebwyeauczj': 145,
  'yhzuhoixugafkonm': 146,
  'mzlcdmigakbbuzli': 147,
  'fuddhlszptfmosir': 148,
  'ldnocwfyeejbmmcy': 149,
  'muixzziwtwouzapq': 150,
  'mqzhmlqqmpafpbqw': 151,
  'bfmdeosllvjkezwq': 152,
  'udlfdefgndowttah': 153,
  'eyrwkwxecpzxzscp': 154,
  'tlhipnhcbdhvhgyw': 155,
  'qdsjznqzjxlekjtp': 156,
  'vxvmxuncsxygbrzd': 157,
  'sutdaojcvfqmjnwg': 158,
  'uhhrakuolcaxvsbh': 159,
  'aloltvlyufzyxfvg': 160,
  'swxgkelaxkoffszz': 161,
  'aawqanlavsjfqrne': 162,
  'zzubfikjmmfsxhbn': 163,
  'cwxtybsrimchiwdv': 164,
  'tkqxtjbbrzagooya': 165,
  'ccxwaznvwtdltwlt': 166,
  'ntjpzidotcatossl': 167,
  'kjogjnoblzpoxgyr': 168,
  'uxfxpraspeoqtmbg': 169,
  'asmpttrlkodaejic': 170,
  'aaykjdjgdzrrdvxz': 171,
  'jskghzhjrpywrbfn': 172,
  'zfylmujpvzgqqfxo': 173,
  'dlemjwpmokwptnai': 174,
  'djxdgbpuyerxgrmx': 175,
  'acvypvzmenxkevbm': 176,
  'ohxrgpugowiyinhv': 177,
  'obkqpwjualnnwgrt': 178,
  'yweystgylcxxranw': 179,
  'vuqhkgrnmheydqku': 180,
  'dwhlbcevejvegsob': 181,
  'gkxcvooedomgcagl': 182,
  'gjxmrfgnorpfspbb': 183,
  'szlkmablxrjoubla': 184,
  'tupmlwnkgjcgcmuv': 185,
  'qdhfzxrzisivuhbx': 186,
  'uouhydwldpcdzuoj': 187,
  'updzeguaxbccwpoe': 188,
  'dnvcqpxxzahdhbvy': 189,
  'rtqyfobkpliuutfx': 190,
  'jdsmqjpfexexznya': 191,
  'oihtzffwsrwsjnfu': 192,
  'hruelqcyvmwzsqkp': 193,
  'oijipbtrzkghftpt': 194,
  'lcokgbxbqigkqzcw': 195,
  'dgwbxitzfzbegnoc': 196,
  'jkguypwgxebmtnkx': 197,
  'qwshkzmlvlerxsov': 198,
  'mbytpqiuixyvpaab': 199,
  'nwaavqeweeqaryzv': 200,
  'qoflnrycwjlbfmow': 201,
  'ybsenzutfrjternf': 202,
  'tksyxmdgogmokuxv': 203,
  'fydlanmzkobgcfsj': 204,
  'xsmqbeukcqahbfgl': 205,
  'qukbrubjquwstnyf': 206,
  'kumhekfclnypkavw': 207,
  'qpcebxmotqhildhx': 208,
  'vtmylwmvnssatjlh': 209,
  'tceovgpqjjopitor': 210,
  'zqruwnlzuefcpqjm': 211,
  'xzdsapxqliboezbc': 212,
  'jkhjcfudwqurdoex': 213,
  'cnicorpxweynumqk': 214,
  'wxzfbqtarfurwcfw': 215,
  'infvsqmvfzjpyfae': 216,
  'ubixvbvqnnjdksca': 217,
  'arfkjhowhuqewzvc': 218,
  'kjhuznifzeghfdra': 219,
  'zukemjnabmcizdzn': 220,
  'ughzfvxgeziewvdi': 221,
  'gxpuiivthwcmpcmc': 222,
  'aywlgifrijfokyzu': 223,
  'exutskjkecvotaxd': 224,
  'dhxftxnxtxlgqcqb': 225,
  'kwuuuvwdrjkyqyfv': 226,
  'wyopladghryqlrlb': 227,
  'sbrarddcurfhmmqk': 228,
  'hqixaqcgdcbagrmw': 229,
  'kwxjejihbgmtnagf': 230,
  'mxytuavlfghapjvu': 231,
  'fkltkgzmjnzqzlqv': 232,
  'hgyoclvrybybkocm': 233,
  'aoytjdcfreqvurza': 234,
  'nsgbpbjvswwlhvmm': 235,
  'zvdpnzgvkjkoophv': 236,
  'bwpieeluivljdtai': 237,
  'exkqtrkthhgvjqdl': 238,
  'iemmvtjtejhlteqa': 239,
  'hhidavhckwcwznhf': 240,
  'qgnqfinpenszbzig': 241,
  'obzgnvzzatnjoryi': 242,
  'cyftaexytlgvmcbd': 243,
  'meratbpknllwoefn': 244,
  'vgaanttvdscmqmjr': 245,
  'admgymnmeilfhmji': 246,
  'cllupxtcyclounsg': 247,
  'nilvygybpajtnxnr': 248,
  'hjejiuqyfrvtxagi': 249,
  'lzsfpyidvnkaxnvs': 250,
  'atsglyxkfbaztzlj': 251,
  'ifrzhyqsimoeljaa': 252,
  'iydbustazndekvfq': 253,
  'qfvolfbvalczrcko': 254,
  'kglgveumqmtwrqsf': 255,
  'nruhduwvuytxnfvh': 256,
  'uamadghmregezetz': 257,
  'cmjjolnwfprpzntz': 258,
  'dtdrfrtruyhvbztx': 259,
  'loomciwexxewgiut': 260,
  'uevoqlbbbmmhkdbi': 261,
  'vnsxpowqjjomnmac': 262,
  'nzxlhibmhrtafeav': 263,
  'ngombkqqomblyxwv': 264,
  'uahuglbjdtacoqjt': 265,
  'abcepdrvvynjsufa': 266,
  'uxpkyjrybttfrluy': 267,
  'lctcvcvytpesgryp': 268,
  'ekztjicqomhuclqr': 269,
  'jhdjdpthkztnjvmb': 270,
  'ubmafwgdsmbkfmwe': 271,
  'ezaffjpqpacrufvd': 272,
  'jrwemlawxsvnwrxv': 273,
  'rsphcdnwdddxhdvb': 274,
  'ybbdbpunwekygnto': 275,
  'unlqqlfvajjczyks': 276,
  'kpnwdujiylvsiuhp': 277,
  'prtnwsypyfnshpqx': 278,
  'kqubvdyyovhfxtpc': 279,
  'jkarjtlhihuxqzfm': 280,
  'zbprczwzmlxgqykc': 281,
  'gfbcqaotflsogaet': 282,
  'lhgeydlzsntbaqzj': 283,
  'ttwsxzxrhwuzystf': 284,
  'tlspgqlrhuzholye': 285,
  'gvaasolsbmnbjhah': 286,
  'mshhupropfijhilz': 287,
  'feioipyfbkxhcsyq': 288,
  'dlrodwgixwmoquny': 289,
  'jcefoutonncubdss': 290,
  'kguahfjnmerrbtpp': 291,
  'xdeuhuabvdhjipnp': 292,
  'ipyrvtdugjovdwzv': 293,
  'whfzavgfbojmgezm': 294,
  'adzzjitkyqlberpu': 295,
  'ioqpncqqlflrjzkj': 296,
  'zaiwfnldcznzgrfe': 297,
  'vpvtqlxqaiejzrqo': 298,
  'vrubhbzjguaxfmlc': 299,
  'mtubnuteguketfck': 300,
  'xqascjfdlnlxubce': 301,
  'byvoguptigfevpyy': 302,
  'sdvssyrvwfwmdccl': 303,
  'khzmqnkqbaqvnakh': 304,
  'yljpdxzmshdpmyhl': 305,
  'ruyuflpnypnsgkbq': 306,
  'nsymgnybdjqxudvj': 307,
  'timtcrwibllgvgxy': 308,
  'ejlwzigdhipvpndt': 309,
  'iwhqpdfuhrsxyqxe': 310,
  'eudwptcohxaazhpt': 311,
  'haowzcsrftoqsrvi': 312,
  'payritakwxpyzwqq': 313,
  'yzdbjmwwtofxmpaz': 314,
  'gcmwblighdilwauf': 315,
  'wchxrbrhstsmhdsk': 316,
  'hwsgwbkydspkbben': 317,
  'xrxxucncrqtcgixl': 318,
  'lwwzmxipnntydwir': 319,
  'ctachoeiozcpkmst': 320,
  'ujwlwswdwvbpacnf': 321,
  'yhcelpjnbxpsmoez': 322,
  'tcyogsbbufjzekla': 323,
  'bvuzvpriwqlnbjxt': 324,
  'xieosvyuphbcyzul': 325,
  'ufpwnqycocwwbgqi': 326,
  'jmycebfjwrkqwsxi': 327,
  'wyoxchtoecahbyjm': 328,
  'kjdumkaiaeblbxtt': 329,
  'ouhkmefnnchsggpl': 330,
  'njcwousmigzpursi': 331,
  'csxjshhnfbtgjcgm': 332,
  'alrfnehgsdtsunhm': 333,
  'asbtrxjnhqdpazot': 334,
  'ifalilovsdszxmjm': 335,
  'zsuewlbquazyrgvl': 336,
  'hvjwbevmcmjpnknw': 337,
  'ureljkoqqvqbpdvx': 338,
  'qidpxyunryowizua': 339,
  'gctieesvmkeoozqx': 340,
  'gzebcnjcmqioqcjb': 341,
  'xjaddkudsebowzen': 342,
  'dweqmfoluivgiayj': 343,
  'qnesuhpxsptzihzg': 344,
  'qpjdblaqrqyuoaqk': 345,
  'xxppvuhwmnezefxy': 346,
  'ybmkbrazyartpatx': 347,
  'ggaokfjtqxyctvok': 348,
  'ehtbxdjhvcwdapsg': 349,
  'uzfgpmnazksmudrw': 350,
  'jhafhnhmasllifix': 351,
  'vylopbnfewdzeury': 352,
  'vafxeruawxlvrttn': 353,
  'tcnfpudadgannoey': 354,
  'dvmnbbkcvcgwnaen': 355,
  'wiyyghhcxezudyxg': 356,
  'fjzqkqcjerkjykkk': 357,
  'htedybhazfjiueyj': 358,
  'sfcciovhmwqehacv': 359,
  'nmhahirmbvqxhxgg': 360,
  'flnipmkwonjnaqsp': 361,
  'bdmklueoovgkajff': 362,
  'hvziklxqbjbvncjy': 363,
  'ogyvyvhcaefqrlgk': 364,
  'dzbwjjmruyqxyvms': 365,
  'uzrhbfduaqijosql': 366,
  'goropquvqaoaajrk': 367,
  'ozpyjjijxdpztngv': 368,
  'nhqkbmwihkfvhjxx': 369,
  'ggqsqgrasnpkxano': 370,
  'saempmkfulqhwfqk': 371,
  'degvuccboupdnasm': 372,
  'xndokrsndaodfknp': 373,
  'ojribuhtopqgkqpp': 374,
  'eokuiduvnrtzavmr': 375,
  'ivhhwynrahlruefk': 376,
  'dbtkrhmbfxpkqbau': 377,
  'rhxboadaoyvvgflk': 378,
  'gdzfmtghobzpihgc': 379,
  'egsfpimnisvvfkne': 380,
  'sboaeuuuhpsjujpz': 381,
  'rlkrrmxxdgaxangi': 382,
  'phprbhssfhrtbeue': 383,
  'isyektlfmcpmotpl': 384,
  'ufxhmwifrakfhfmb': 385,
  'etegzqakpcvyhkaj': 386,
  'nhembilpmgrfjifn': 387,
  'ryjiidsxttvdcpwu': 388,
  'kzhhwebpekxgvfsl': 389,
  'dohuwjuguzyvqaqg': 390,
  'dqxenajfgcimjgnw': 391,
  'ubttjiaeeuwzcclq': 392,
  'reolzfmikorzxstf': 393,
  'djyptluftbfkxtjd': 394,
  'tlrnhgwgduswslyd': 395,
  'xzwnliotgalpusga': 396,
  'gvxirlwrjrrnoadg': 397,
  'zczpxdcxdciitjcu': 398,
  'ptbudvgjgycmmsdq': 399,
  'jrwdpzrmxqlzzepk': 400,
  'sxmsrnbwrnvfjcvp': 401,
  'dohofttmidfqjozb': 402,
  'tegzsblugaczvdmy': 403,
  'taovawittfogygzi': 404,
  'eivjhovgfnfctgjy': 405,
  'aivacsqryguqpdib': 406,
  'bikffjqejohkyhat': 407,
  'hjhlpxkdgqzdlnkc': 408,
  'ekwqttgkaobektch': 409,
  'dkgrgmlhhtnvzmps': 410,
  'dlwcludeemsmffyb': 411,
  'jynbrbzntxrssxzh': 412,
  'ebdcmhmtqnfkaalo': 413,
  'disoykeofihapsal': 414,
  'fadjogsnmecatcfb': 415,
  'frvooqzltrzlbhxb': 416,
  'optzzqvbwwriedfo': 417,
  'ovhdtvldyrrurawo': 418,
  'xqydufxhniyjunrl': 419,
  'grpzbvvgujnswyyg': 420,
  'gsooyxmnwsucrksh': 421,
  'jmlbcbnedxdoagqm': 422,
  'bfmvfelwblrzqfyr': 423,
  'hikofhdgvhuwkixj': 424,
  'qdvjpkftaveygusd': 425,
  'gtbzqhsuzzdfhzfv': 426,
  'pdljbgzzhxrhnqmu': 427,
  'zqswdfwtkyehitft': 428,
  'fupocenmkiiluzpe': 429,
  'aparvvfowrjncdhp': 430,
  'tneakanblaxyevhf': 431,
  'mvvztpapgrcwgrdt': 432,
  'cwrigmmyfzesuezf': 433,
  'mxmhlvlmychxzork': 434,
  'wotupxkyxwcienzd': 435,
  'vxumxjoeywcphfoo': 436,
  'ixfiagqhmszowdmf': 437,
  'kzzakxocsxhkvslf': 438,
  'wcjrtzzkemciejsz': 439,
  'vdetuihriafhetdl': 440,
  'noxmlxlzirrxdriv': 441,
  'vikmjrynreazqubj': 442,
  'iigklaveqvybkbid': 443,
  'qozlaoxmwusgalpz': 444,
  'ysmwdnymkzsgskpv': 445,
  'yobesdjweimafxnq': 446,
  'yqztzexmqeyeirmv': 447,
  'iklmkdrwatltidff': 448,
  'owrozlxfshxrcgvh': 449,
  'cedgzkylsgxnlcjg': 450,
  'ciuxczxwhwbxdkdf': 451,
  'szvfwsizhxrbklhz': 452,
  'lqohoawdpvdisdiw': 453,
  'ggzcspiycgszcunf': 454,
  'hkazsxqvbtmawovu': 455,
  'squxtuwvjnzbhzsc': 456,
  'wrzuftzqwoiwsmfc': 457,
  'ztwsplndgicacmuu': 458,
  'ldejndeewhhlcvgc': 459,
  'vwerelrvyumnkbwk': 460,
  'nfxbfvlwvmxfproe': 461,
  'nkueyjctyasmotny': 462,
  'giyhzprslgbwsaeu': 463,
  'jcxkvyjnzflnlzvh': 464,
  'trcsvrxdekscyvyq': 465,
  'jedhlhdmkdprvyex': 466,
  'kgezpfvpmpmdicts': 467,
  'zrclcvscjwdbabii': 468,
  'kfurwythfncqbrxs': 469,
  'mjpgppxzelxrbcnt': 470,
  'wffzvseexopfwwjy': 471,
  'btjxvrgfduskmpts': 472,
  'pvyfdiggxtjoyhqf': 473,
  'jghfkxkawqeujuhj': 474,
  'khwbllfppvhgkgzc': 475,
  'johsjccpkithubii': 476,
  'anrwlguztftzfdng': 477,
  'gxgjyxrnnugizdvf': 478,
  'zwutaiivgrxnrwat': 479,
  'hrlyreijarvikmlk': 480,
  'ieqgavmmxulqlvvl': 481,
  'owkgoejsxqlzahbz': 482,
  'cmmuslxsfluvfyof': 483,
  'exfftzvkfnajarkm': 484,
  'rrsrcesavzhbjqwk': 485,
  'edlxghhjgpmvhabz': 486,
  'gmzbnaysqjpkzqbt': 487,
  'xiesnbkcyzrpzlyq': 488,
  'vfprhybczhnkefdf': 489,
  'mpwepwxyokmciojj': 490,
  'gkniccewzkphqzrp': 491,
  'zcqptmhakcmihiry': 492,
  'nkktflvfoasvkvht': 493,
  'shemwbbeliuvnvvm': 494,
  'dpklliwcxycpfriu': 495,
  'bpqxbrvavqshzebb': 496,
  'yrfmcopbrlmfinuq': 497,
  'wofhkqytrnqvbije': 498,
  'degdppvcniqrzruc': 499,
  'fhliexbdvrlrpjvx': 500,
  'nfrqxttuhpuqvwti': 501,
  'kbixxyjwgxmbhcsa': 502,
  'jixkbeuswaznqplh': 503,
  'kbnrpawcssaxrpmb': 504,
  'fvrvkxucfyuyfpbk': 505,
  'yzxgnwgpnrdprtbh': 506,
  'yxovdmyzjzoutcek': 507,
  'bsiyfrkwdyptmwji': 508,
  'nbxjozrynlospbso': 509,
  'nwfvqtdnlrvhdbuc': 510,
  'ktytfazsvecrjvzl': 511,
  'obtymepcippfwigb': 512,
  'ajdmkzcduerbdsww': 513,
  'gujwvdfcmmqcwxfi': 514,
  'wtxtgodhmneofvzz': 515,
  'gqfadgvnztixxbmv': 516,
  'lwtlsafdbhymtibi': 517,
  'clcqzivttlcdfpnv': 518,
  'bpuzzsqfyvebjzjg': 519,
  'aggyqhwjksgqtxdd': 520,
  'kvcddisqpkysmvvo': 521,
  'xzdakcdqrnwhtpdb': 522,
  'ogrmvnhwyeydwcxi': 523,
  'ytornvfpgbsoizqr': 524,
  'iwxvflrheripbuvw': 525,
  'wycspyzpbmhbnmda': 526,
  'ldkzuxzespcgajev': 527,
  'drpwkafcvcypyrmw': 528,
  'aysnuezuqgjioyyf': 529,
  'ggadbhlnfgoflkaf': 530,
  'mizxbkgdiuoehddq': 531,
  'arfzuuojdtlgxehv': 532,
  'tsvmlrkmftqbjvub': 533,
  'qzrkqxhgbqfyswsj': 534,
  'uhqwwluaswbuqqjc': 535,
  'gbkevbmczkqhkmoc': 536,
  'rrqbtdjvuwwxtusj': 537,
  'ohgtowaarzphsifb': 538,
  'hwldevoubgzgbhgs': 539,
  'lwclhevnunilhrmm': 540,
  'mdxtphkujabwpjeu': 541,
  'usjukvawgoqplrph': 542,
  'ugwrafmvdavbsrzl': 543,
  'itmcxdqtvddvmanj': 544,
  'zeqmrfiqiusygxdd': 545,
  'eyaqhofitsegmcwi': 546,
  'srgqbkjrwdbikmzq': 547,
  'iqepotyqjqeebzix': 548,
  'vuvbtxegkdifkviv': 549,
  'cictcfpmfdmknnye': 550,
  'ijxmcnthqquddvhc': 551,
  'unmxysjyilftwsvy': 552,
  'luxhsezouvtbkbpn': 553,
  'vokpwtikxckeemdi': 554,
  'vqdlslwzvwucentl': 555,
  'kcfhiwouwwfjqtta': 556,
  'jeckddxjsdolnuhe': 557,
  'lmqoiaqyftqublmk': 558,
  'vwjjtxhpebfhzzck': 559,
  'dgwtezteqyzzylho': 560,
  'wrvfnbtdqgpsnzic': 561,
  'nfmbusxwwqhsaquy': 562,
  'ytckjafhdfppmrhv': 563,
  'nolayrxwnjwzgtoo': 564,
  'xaaujpnniyiuhfql': 565,
  'qbztetcodwhfmoyg': 566,
  'zbqqfjqpoluazvlo': 567,
  'uysllzwmzcsweunu': 568,
  'utvgeykupnwzepks': 569,
  'demgvtbzilochupd': 570,
  'otrziwxmbpndmyaa': 571,
  'caovvakxarqpgymh': 572,
  'buuihjqtdgilqzjc': 573,
  'lwrjcljtxkokvnes': 574,
  'pbwbzedhenqmpfqt': 575,
  'ykzumnthkadrzjdb': 576,
  'zfesqldixdegnidi': 577,
  'tzyaldqhudfiajin': 578,
  'yohngmkmrueenrvs': 579,
  'gykwyopsdhbsalvd': 580,
  'spbjeokdemicpdey': 581,
  'sdottmimvqvfhzlk': 582,
  'qyqvfzuwfpyztbla': 583,
  'okeuihmplbxhxceo': 584,
  'zzjxvhegwmgqodzk': 585,
  'ypgcfauffeqpeerz': 586,
  'cedczcxvthqqkwvn': 587,
  'ettwalwfkzvwdasa': 588,
  'fgxxyxcbjkodwcln': 589,
  'cgrdxjyaxssrszjz': 590,
  'uzqtsirvtxcfqnbp': 591,
  'knrylcwjpefiqlma': 592,
  'dxpafctvukcmaqao': 593,
  'qbkipjmisqllqwzy': 594,
  'evuqnfndofizyoqn': 595,
  'hpohizpkyzvwunni': 596,
  'njujuhbmnqusynwf': 597,
  'kkxluqnhrmwkfqnh': 598,
  'qicnjymlpsjmgluy': 599,
  'wykcypxicfqltavz': 600,
  'pselomoxubpkknqo': 601,
  'yfalryaixpzfoihd': 602,
  'qwqwzvbefvgugtzi': 603,
  'akqknybjyxwbdpot': 604,
  'nrmzpcqkbzgmsdeo': 605,
  'iadmwbxpppukpjyh': 606,
  'tmikjfqekaorgssv': 607,
  'azxtekfvyycfmnpt': 608,
  'ospbwzzmmxeovscc': 609,
  'wylaluxuyuqkytus': 610,
  'zzlzzujtugbfpsvv': 611,
  'lxhecyqzfsucxgqm': 612,
  'jjjvjaxpzvlbryfd': 613,
  'aewtczgiyochvagl': 614,
  'kzqcxkrdytalrphb': 615,
  'fzgvfpmdmggikezp': 616,
  'dluodrxtjdtvbxug': 617,
  'ywnimisaozuyjomi': 618,
  'cqewccykrcmvawlo': 619,
  'dwsasdexwmpsmowl': 620,
  'uwwrbkmjbjyxutfq': 621,
  'bkwszkqrqybfgpyn': 622,
  'vxqfscklywhurrjp': 623,
  'lhyhsxrxdftbsavk': 624,
  'nugjzznlbtmumwrp': 625,
  'luwiodhzrjjobjlw': 626,
  'lfzbrhthlxhnmhva': 627,
  'afmufyguudlwbcix': 628,
  'gfhjqtkgvomiygvx': 629,
  'vpvsuuudxglarezp': 630,
  'ixbrfaoerogqomah': 631,
  'gdaxhrlhuilhiijt': 632,
  'jcpjlgfslytgmbjq': 633,
  'xabkvgvnbqzrmnyc': 634,
  'cwshqcgmaazzefkx': 635,
  'gforiqpfasfwlkfl': 636,
  'rgfytoxurocumuxu': 637,
  'wpsyqubfrhdspxkx': 638,
  'uureltetaotxxdji': 639,
  'cnlvybtdupkcwczn': 640,
  'pfvqxmrnkptcrhet': 641,
  'sqqvhmadjqegpsps': 642,
  'tkomxtfmozdiflzf': 643,
  'xoueplwxwxrzasti': 644,
  'mymdahqxtsywqpdn': 645,
  'mdiqmxwkzvnpeaop': 646,
  'sghyfposeljrkedw': 647,
  'zghfsejpgrfrqfdp': 648,
  'brjgjnnpueqkyaxo': 649,
  'vdwfxzfzbybhsmay': 650,
  'mkbpzddzmalsleud': 651,
  'yrnbnvvghdwvpayv': 652,
  'clmcokjtplrbzvuh': 653,
  'aocfhyagfzdywcih': 654,
  'bwjkokfezucsuigb': 655,
  'fpfzaadmykntrupr': 656,
  'xoetbcowyxwukawr': 657,
  'kalfshwbcuoobdwe': 658,
  'xjsnlswprucbsehn': 659,
  'cuxaapvakeemmbaa': 660,
  'dpcnodgqfivkhxvn': 661,
  'ckxqqcnqrqxijmmf': 662,
  'agowcnternxraavr': 663,
  'wkzwidzltxinpgen': 664,
  'ejbxcyhffvcouoxd': 665,
  'rzjssfxzzoddvgdc': 666,
  'uaweumzfugnsyqmx': 667,
  'kpciudedjlrqsfte': 668,
  'mbjevmuapzxqjnwg': 669,
  'ozmdlzfsareqmkon': 670,
  'skgvahbwdkddoxha': 671,
  'qcykqtxlqnbcqfct': 672,
  'hselphnqlvecmmyx': 673,
  'rytmtyltypttvqjs': 674,
  'bxrkvmsmoqvefhra': 675,
  'adhoqfsfdpetomvs': 676,
  'ngksfbgkdeufmhfy': 677,
  'olupoctwepebdqqo': 678,
  'jsudrcgsrfddwixw': 679,
  'nhmkqmpmstaunzqh': 680,
  'tafluhgrtixdlhpv': 681,
  'uzmldekmvczimsrj': 682,
  'tcyceqtrfusfmkpy': 683,
  'nmkzmncfytfwyfvt': 684,
  'lxchmlyoaiocynox': 685,
  'clwswcgzlaojjddv': 686,
  'rbxibrjokiihgfjb': 687,
  'cazrxylvhylncoze': 688,
  'arcsdpohuzvikyaw': 689,
  'sioekxjbocpzrjzi': 690,
  'gvsbsfrfcvftmytm': 691,
  'qxksnnsrnebfkwqs': 692,
  'ismjlsoibleinjdp': 693,
  'mbnozlcufjgvpcdb': 694,
  'gspurupoewenqznk': 695,
  'qghhvatpvekejzpf': 696,
  'toqaaqswchaiyhsk': 697,
  'hayciibjzwapccnb': 698,
  'xgvsuftfggoojbdp': 699,
  'stgeqvsewqntykyo': 700,
  'zkreetxvsoihwkgo': 701,
  'tyktnjdtbrucursh': 702,
  'bnvgzfegimthyhyo': 703,
  'nzanewsbtbnpgrom': 704,
  'zrfduayrhhofpqtt': 705,
  'swacqepcxnosmcll': 706,
  'ajktbllxjzfdtwpy': 707,
  'ysonsqntnqnqagnn': 708,
  'xjsozzwcppavldee': 709,
  'qzgaezfhutbcnkuf': 710,
  'rcxmbwwsxkkkyyjs': 711,
  'xbdjgmfolqdfvftr': 712,
  'yvlkrzgjhwrlyihc': 713,
  'ujgldnoigollndkj': 714,
  'eyrukxfjgrcdrqeo': 715,
  'dhjmmmtnpcnalzna': 716,
  'wrpeamdcqpawnqag': 717,
  'moayoogjmiizcbez': 718,
  'guiimarisyyjqnfg': 719,
  'ejeggxbwhufjtjhd': 720,
  'hungxfwbkelospfy': 721,
  'jxlbmlxexeucwbue': 722,
  'tuudpbartgtwkoms': 723,
  'mcuawemlwwgaiesn': 724,
  'pyhcuhumhsoodqwl': 725,
  'fwqrokhhbukfpssj': 726,
  'heicadwqfavetjwx': 727,
  'snsnxmucuccvqfvz': 728,
  'fszxbpjtsihsmnqv': 729,
  'jlhzkuikphkxcigk': 730,
  'qxtqrwxfvuenelml': 731,
  'tdozuksvtvtqcykp': 732,
  'svcvmlpsqtzbrmnz': 733,
  'blmjcblhzfqwhgew': 734,
  'bvfbihgnteuiuaov': 735,
  'pticuqiimwdrkpdy': 736,
  'zedpyrfkmhzqxmaz': 737,
  'bvkytcvosbaunupg': 738,
  'efiskxgaocgqqjvr': 739,
  'rxyndewyvbophaku': 740,
  'kdsbtuikoaulynsu': 741,
  'ueujqvpwszzhovbj': 742,
  'hcfpedolsygjsofb': 743,
  'jepialiqqsttgcid': 744,
  'ukqbsscpgbfatdhs': 745,
  'biqzvbfzjivqmrro': 746,
  'cpruzckbhhcyorgf': 747,
  'pmxjblqhvpwflkwt': 748,
  'wqqxbrsnrtnuxjjl': 749,
  'wniogbpezwqrinyt': 750,
  'zuqrdemwihnexkpw': 751,
  'uhkhghxuorryhlis': 752,
  'xkqlmdeookbxzzhv': 753,
  'enmicxqiumbpozpk': 754,
  'fouvkndsdstwjqpj': 755,
  'lqsgdewyevczcvwf': 756,
  'kcjttmlajpvbntkn': 757,
  'ldxjynecsqlswvbq': 758,
  'gtvhxebtkefavzhg': 759,
  'wxcohilpavlwlnze': 760,
  'gdtzpvajphaxanpi': 761,
  'nzgfjmknhxdezggp': 762,
  'xhczitnzxmxxebeq': 763,
  'drptidaltxzxopwv': 764,
  'anwpfxivfvhnobvz': 765,
  'uudulyvocjutaxtj': 766,
  'abacekzzrkhtgpcp': 767,
  'dlbnpwopifytzerl': 768,
  'pustczakchcimwuy': 769,
  'ponwkmeaxagundzq': 770,
  'xjnjmxyqemqqiejp': 771,
  'snpaaoiipfuxmvol': 772,
  'cgighhnwnkxluccz': 773,
  'pjbnwqhnqczouirt': 774,
  'esilvarzflhfmjhh': 775,
  'htppstzpipwjtuia': 776,
  'qjkwsppqbsgsvjwa': 777,
  'jiyzqszfywhdfsil': 778,
  'doohwubeqhbkevhr': 779,
  'mqsiquclpholncqd': 780,
  'pebdztssohmloufw': 781,
  'bowuhkfextvyabch': 782,
  'hhrmdevbfqiebnum': 783,
  'beagnicqcxahqkeq': 784,
  'cgkclpnidlmetsrb': 785,
  'trwedbipujnvnhpr': 786,
  'tgvulwtrjyegawlr': 787,
  'rjhfsrwtoqfqvuqu': 788,
  'xuxdvcabcanlgmst': 789,
  'clsrzyechukbaeat': 790,
  'zqjvnptshpgofkqc': 791,
  'wsfgxnwhxftjhpxw': 792,
  'zxvcbwcwoqnkxxbs': 793,
  'gzpmemdiurffxomf': 794,
  'rnrkbyojyiepdvqv': 795,
  'ygsnfanduarpqvrn': 796,
  'qmahqrjhkxvkwboe': 797,
  'uhnrmazhzouxvsqd': 798,
  'tbpblaaxsajjlyok': 799,
  'iditakunbaxfjcmc': 800,
  'odjkyxbmtxqhkflm': 801,
  'fbvdqkwltwgykywc': 802,
  'rabwrzdzwjjdhbmx': 803,
  'vtgypuzvlawmkolb': 804,
  'yybjogamsfqljfpu': 805,
  'pbrroilhklrifbwq': 806,
  'oryfrzxilushvigq': 807,
  'innngarflvbnwntw': 808,
  'fijtohsiakkeuuct': 809,
  'zycfmwxhaaaxdwpb': 810,
  'ulrbzlswbgzvmpas': 811,
  'ltdxvujhaocpnmzf': 812,
  'wehkqzwvbeonajcu': 813,
  'fvsyahnxhitfllgt': 814,
  'twhtulgwsricneea': 815,
  'wgruytvmfzalzrtb': 816,
  'rgrpzewhrznrqrna': 817,
  'owxrlgxbigikfgtm': 818,
  'gapclpflkdsbeorm': 819,
  'fnqgfjfkzhfbiicl': 820,
  'xrmvlihddtxlbzvw': 821,
  'rwrevaiebpmviwqz': 822,
  'smcawzwicovvejgm': 823,
  'ruposftqgswlcyou': 824,
  'yvuoearellwavkzs': 825,
  'qewzxgvvhqhkfcxe': 826,
  'ogdxwqtrpclsxeyw': 827,
  'yglorajvvrsviget': 828,
  'xokomvoaaiyuedhu': 829,
  'blcuqlgntjavsyhs': 830,
  'znppxsjvuytcambw': 831,
  'gjchrdhbeixppooh': 832,
  'cfuyjykoohewxzeg': 833,
  'ajtardhciglimsdi': 834,
  'gsbeyysssgzgkkuo': 835,
  'iulvirmzdntweaee': 836,
  'gguphuccgeqyojbl': 837,
  'rclsneerlfasdcpi': 838,
  'dtpbahjtnmyuxqno': 839,
  'vpzzxdehhwlzsgrp': 840,
  'xiwnirovwicymtif': 841,
  'flpmjcetsinyjimc': 842,
  'okzpgwvslpvgceva': 843,
  'qwedbcvlquqfoycc': 844,
  'gicokqmbjnafngon': 845,
  'ewkcexkqpsyfnugi': 846,
  'vbjxuynqachujrmt': 847,
  'kzwthrslljkmbqur': 848,
  'nggwrmvazdxdjyfh': 849,
  'gyhebbdhtmqwwxnp': 850,
  'fklewvbxuecmupxn': 851,
  'nxwedpnhirijkodc': 852,
  'dqgtaigmpivatpeu': 853,
  'zoypfizhpbtpjwpv': 854,
  'jlxizhsfukrheysf': 855,
  'qnixeczkijjyiprb': 856,
  'wnrwtzbbxbvnmbqd': 857,
  'kxmtwjjyzuqqgmjw': 858,
  'hjhvhzfpslejsnej': 859,
  'qahlidfcpdaofkwm': 860,
  'vomuvsgbhqzjwhgb': 861,
  'suycgjdrxxvxgmha': 862,
  'odpuaztxnyumdvvc': 863,
  'pqpqthiapbycbhor': 864,
  'uczhoudymbvnhter': 865,
  'fjimpbebyszdttpl': 866,
  'lxvjgyjdszxtcryf': 867,
  'fnfpmchfyyqmdtfm': 868,
  'lvpcmycoagwxqpag': 869,
  'hjyumbyuzbeubtbb': 870,
  'sguprofjftozaujc': 871,
  'tddtoayhfpdtxokp': 872,
  'xpxsjmglcvcsxwdy': 873,
  'wvnsmznngunxhcsb': 874,
  'xnwekpoxnvwckfcp': 875,
  'iexbeucevqnjjbcz': 876,
  'fdbwfjqkichwdebq': 877,
  'zakviitdfvxsgkow': 878,
  'gwptulznqgygeegy': 879,
  'opojibguvnupidif': 880,
  'tdvzvrkldmrkqeth': 881,
  'ndepxuvlaiqzdnan': 882,
  'ylboorftnzombypn': 883,
  'nnzwevftfeodipkn': 884,
  'wmmjbitjeevklkzj': 885,
  'obvxygchobqafuzw': 886,
  'gdultxlilvdnuwso': 887,
  'ixyvsrnksxeiqbve': 888,
  'dqqtizjjhjmqdqqb': 889,
  'wcyahxrmwqvhmadq': 890,
  'jbvhqxmbarxynmfk': 891,
  'tjdlkefrbysjheap': 892,
  'xcpcxksgiefkqznu': 893,
  'qvwenzdmnwecdiql': 894,
  'lqkdgbosdzrtitgx': 895,
  'vnefzhazthgsjuax': 896,
  'gjblfwqtnckjletn': 897,
  'myfrksrutuknkcnq': 898,
  'dmqhptvycdmkaxbw': 899,
  'mpmchhrcazhsvjgc': 900,
  'urullqqbaabxllxl': 901,
  'zagpnfpbwgeyeufr': 902,
  'joosvbazdbslkqgx': 903,
  'ygctwjsvugjhuylz': 904,
  'ktrfapbareyzyyyq': 905,
  'ujfqhxynqnqeldes': 906,
  'dxoirhatawazqmey': 907,
  'sgknghheolfpzuid': 908,
  'pfkfojczxwevqesz': 909,
  'zojbyremtnxajomo': 910,
  'kilbdkfbpczjrqek': 911,
  'swjkmyqytzxjwgag': 912,
  'mcadxmmocjhzzbtt': 913,
  'ceswaufhjtmqcndn': 914,
  'wwmsynqlijbriqxy': 915,
  'efyukbppkfgttvvw': 916,
  'pgkgdfabkhkbviht': 917,
  'ixwsqebjjdlxcqsq': 918,
  'ukztcjpqrpetqrnx': 919,
  'kmlnlefquqpparsa': 920,
  'fozvmjndontqoxpg': 921,
  'ljwfegchielwaghb': 922,
  'xyuwuxlpirkzkqdb': 923,
  'kowgdytyvjhvcmta': 924,
  'xuioboiuzasnmuva': 925,
  'esiuazjovwvdlgjy': 926,
  'qbohnomeacnwdafj': 927,
  'uskrsfpueljrtxkg': 928,
  'dcjzdpoxqvgnjpmi': 929,
  'jgkpiuuctpywtrlh': 930,
  'gjpgirzuabhfpkjd': 931,
  'cbmmnlpqoyyursux': 932,
  'efhjvgwyjfjqsdna': 933,
  'yhotwssicqxqetep': 934,
  'sncpkctrqcditirm': 935,
  'rwtwnvhjqabvovnz': 936,
  'aceqpjprqgzhffuw': 937,
  'hcoxxbfccserxklx': 938,
  'dzjyqrdmawtdcqbx': 939,
  'vjarzxzevsdnftcl': 940,
  'ammbrasbxojlitmt': 941,
  'dlrvgwmumnwcjixm': 942,
  'qdmbicmyqrqalixj': 943,
  'ssnqyyteovyaxylf': 944,
  'pijaubxodtxcsqjp': 945,
  'nrwphouoeazzmbmx': 946,
  'rqaprgqcktgrlxnv': 947,
  'ucggoqoneixjlxxy': 948,
  'hixbnwflcimyepla': 949,
  'bawsoqdugnynetyj': 950,
  'eootycnsxmeekotz': 951,
  'xsfzlqjhqbcpswcz': 952,
  'lqalilfrsznnxarm': 953,
  'bzsxlzwfqbnmljsm': 954,
  'xkzehzohmfrsmolg': 955,
  'qrgsdbjbjwwgirvo': 956,
  'ambmbeydwsdljdcc': 957,
  'vbnagxwgmwirhnjt': 958,
  'nofmcfnaiuzlqgrk': 959,
  'itvlnddnkkmyemme': 960,
  'cufklbvsirnawzmv': 961,
  'svmjzfcsvgxiwwjt': 962,
  'vudjowytbogxkrcy': 963,
  'iadwyxxyvkcpyeus': 964,
  'grnnfnsjjydskrht': 965,
  'ipauahivutejsrev': 966,
  'xebooruxiuwbpzdc': 967,
  'xgikerzyofvqsmnt': 968,
  'erouvyhobhzcycuk': 969,
  'pyholyswkkqjmxlj': 970,
  'ktpoqrjuewxmkjqr': 971,
  'oqkxqgmcsytmcsjz': 972,
  'kbqauyzezmwspqvv': 973,
  'yttvzqeuddvehiqu': 974},
 'vh_fuel': {'Diesel': 0, 'Gasoline': 1, 'Hybrid': 2},
 'vh_type': {'Commercial': 0, 'Tourism': 1}}

def label_encoding(merged, col):
    dc = dict_dc[col]
    merged[col] = merged[col].map(dc)
    print("Label Encoding of '" + str(col) + "' column succeeded.")


def df_preprocessing(X_raw):
    X_raw.drop("id_policy",axis = 1,inplace = True)
    label_encoding_cols = ['pol_coverage','pol_pay_freq','pol_payd','pol_usage',
                      'drv_sex1','drv_drv2','drv_sex2','vh_make_model',
                      'vh_fuel','vh_type']
    for col in label_encoding_cols:
        label_encoding(X_raw, col)
        
    X_raw["get_lic_age1"] = X_raw["drv_age1"]-X_raw["drv_age_lic1"]
    X_raw["get_lic_age2"] = X_raw["drv_age2"]-X_raw["drv_age_lic2"]
    X_raw["population_dens"] = X_raw["population"] / X_raw["town_surface_area"]
    X_raw["car_value_dens"] =  X_raw["vh_value"] / X_raw["vh_weight"]
    
    combo_feat_cols = ["population","town_surface_area","vh_weight","pol_duration",
                       "vh_value","drv_age1","pol_no_claims_discount"]
    for i in range(len(combo_feat_cols)):
        for j in range(i):
            col_name_p = combo_feat_cols[i] + '_+_' + combo_feat_cols[j]
            X_raw[col_name_p] = X_raw[combo_feat_cols[i]] + X_raw[combo_feat_cols[j]]
            col_name_m = combo_feat_cols[i] + '_-_' + combo_feat_cols[j]
            X_raw[col_name_m] = X_raw[combo_feat_cols[i]] - X_raw[combo_feat_cols[j]]
            col_name_t = combo_feat_cols[i] + '_x_' + combo_feat_cols[j]
            X_raw[col_name_t] = X_raw[combo_feat_cols[i]] * X_raw[combo_feat_cols[j]]
            
    X_raw.replace([np.inf, -np.inf], np.nan,inplace=True)
    X_raw.fillna(-1,inplace=True)

def fit_model(X_raw, y_raw):
    """Model training function: given training data (X_raw, y_raw), train this pricing model.

    Parameters
    ----------
    X_raw : Pandas dataframe, with the columns described in the data dictionary.
        Each row is a different contract. This data has not been processed.
    y_raw : a Numpy array, with the value of the claims, in the same order as contracts in X_raw.
        A one dimensional array, with values either 0 (most entries) or >0.

    Returns
    -------
    self: this instance of the fitted model. This can be anything, as long as it is compatible
        with your prediction methods.

    """
    np.random.seed(2021)
    df_preprocessing(X_raw)
    
    x_trn = X_raw[X_raw["year"]<=3]
    y_trn = y_raw[X_raw["year"]<=3]
    x_val = X_raw[X_raw["year"]>=4]
    y_val = y_raw[X_raw["year"]>=4]
    
    model_1 = NGBRegressor(
        Base=DecisionTreeRegressor(
                criterion='friedman_mse', 
                max_depth=3,
                min_samples_leaf=3000,
                random_state=2021),
        natural_gradient=True,
        n_estimators=1000,
        learning_rate=0.01,
        minibatch_frac=0.9,
        col_sample=0.9,
        verbose=True,
        verbose_eval=10,
        tol=0.0001,
        random_state=2021)
    
    lgb_train = lgb.Dataset(x_trn, y_trn)
    lgb_eval = lgb.Dataset(x_val, y_val, reference=lgb_train)

    params = { #lgb_params
        'task': 'train',
        'boosting_type': 'gbdt',
        'objective': 'regression', 
        'metric': {'rmse'}, 
        'learning_rate': 0.01,
        'num_leaves': 120,
        'random_state':2021,
        'bagging_fraction':0.9,
        'feature_fraction':0.9,
        'min_data_in_leaf': 3000,
        'lambda_l1':2,
        'lambda_l2':1,
        'num_iteration': 1000,
    }

    model_2 = lgb.train(params, # パラメータ
            train_set=lgb_train, # トレーニングデータの指定
            valid_sets=lgb_eval, # 検証データの指定
            early_stopping_rounds=30,# 100回ごとに検証精度の改善を検討　→ 精度が改善しないなら学習を終了(過学習に陥るのを防ぐ)
            verbose_eval = 10
                 )
    
    params3 = params.copy()
    params3["random_state"] = 1021

    model_3 = lgb.train(params3, # パラメータ
            train_set=lgb_train, # トレーニングデータの指定
            valid_sets=lgb_eval, # 検証データの指定
            early_stopping_rounds=30,# 100回ごとに検証精度の改善を検討　→ 精度が改善しないなら学習を終了(過学習に陥るのを防ぐ)
            verbose_eval = 10
                 )
    params6 = params.copy()
    params6["random_state"] = 6021

    model_6 = lgb.train(params6, # パラメータ
            train_set=lgb_train, # トレーニングデータの指定
            valid_sets=lgb_eval, # 検証データの指定
            early_stopping_rounds=30,# 100回ごとに検証精度の改善を検討　→ 精度が改善しないなら学習を終了(過学習に陥るのを防ぐ)
            verbose_eval = 10
                 )

   
    model_4 = NGBRegressor(
        Base=DecisionTreeRegressor(
                criterion='friedman_mse', 
                max_depth=4,
                min_samples_leaf=2000,
                random_state=3021),
        natural_gradient=True,
        n_estimators=1000,
        learning_rate=0.01,
        minibatch_frac=1.0,
        col_sample=1.0,
        verbose=True,
        verbose_eval=10,
        tol=0.0001,
        random_state=3021)
    
    model_5 = NGBRegressor(
        Base=DecisionTreeRegressor(
                criterion='friedman_mse', 
                max_depth=3,
                min_samples_leaf=1000,
                random_state=4021),
        natural_gradient=True,
        n_estimators=1000,
        learning_rate=0.01,
        minibatch_frac=0.9,
        col_sample=0.9,
        verbose=True,
        verbose_eval=10,
        tol=0.0001,
        random_state=4021)
    
    

    
    #display(X_raw)
    #display(X_raw.info())
    model_1.fit(x_trn, y_trn,X_val=x_val, Y_val=y_val,early_stopping_rounds=20)
    model_4.fit(x_trn, y_trn,X_val=x_val, Y_val=y_val,early_stopping_rounds=20)
    model_5.fit(x_trn, y_trn,X_val=x_val, Y_val=y_val,early_stopping_rounds=20)

    return (model_1,
    model_2,
    model_3,
    model_4,
    model_5,
    model_6)


def predict_expected_claim(model, X_raw):
    """Model prediction function: predicts the expected claim based on the pricing model.

    This functions estimates the expected claim made by a contract (typically, as the product
    of the probability of having a claim multiplied by the expected cost of a claim if it occurs),
    for each contract in the dataset X_raw.

    This is the function used in the RMSE leaderboard, and hence the output should be as close
    as possible to the expected cost of a contract.

    Parameters
    ----------
    model: a Python object that describes your model. This can be anything, as long
        as it is consistent with what `fit` outpurs.
    X_raw : Pandas dataframe, with the columns described in the data dictionary.
        Each row is a different contract. This data has not been processed.

    Returns
    -------
    avg_claims: a one-dimensional Numpy array of the same length as X_raw, with one
        expected claim per contract (in same order). These expected claims must be POSITIVE (>0).
    """


    np.random.seed(2021)
    df_preprocessing(X_raw)
    
    predy_1 = model[0].pred_dist(X_raw,).params["loc"] 
    predy_2 = model[1].predict(X_raw, num_iteration=model[1].best_iteration)
    predy_3 = model[2].predict(X_raw, num_iteration=model[2].best_iteration)
    predy_4 = model[3].pred_dist(X_raw,).params["loc"] 
    predy_5 = model[4].pred_dist(X_raw,).params["loc"] 
    predy_6 = model[5].predict(X_raw, num_iteration=model[5].best_iteration)

    pred_claim = (predy_1 +3*predy_2 +3*predy_3 + predy_4 + predy_5 + 3*predy_6 ) / 12

    return np.where(pred_claim<0,10**(-4),pred_claim)


def predict_premium(model, X_raw):
    
    np.random.seed(2021)
    df_preprocessing(X_raw)

    mean_1 = model[0].pred_dist(X_raw,).params["loc"] 
    mean_2 = model[1].predict(X_raw, num_iteration=model[1].best_iteration)
    mean_3 = model[2].predict(X_raw, num_iteration=model[2].best_iteration)
    mean_4 = model[3].pred_dist(X_raw,).params["loc"] 
    mean_5 = model[4].pred_dist(X_raw,).params["loc"] 
    mean_6 = model[5].predict(X_raw, num_iteration=model[5].best_iteration)
    
    mean  = (mean_1 +3*mean_2 +3*mean_3 + mean_4 + mean_5 + 3*mean_6 ) / 12

    SD_1   = model[0].pred_dist(X_raw,).params["scale"]
    SD_4   = model[3].pred_dist(X_raw,).params["scale"]
    SD_5   = model[4].pred_dist(X_raw,).params["scale"]

    SD = (SD_1*3 + SD_4*2 + SD_5) / 6


    prank = pd.DataFrame({"mean":mean,"SD":SD,}).rank(pct=True)
    mean_pr = prank["mean"].values
    SD_pr   = prank["SD"].values
    
    large_pr_flag = np.where(mean_pr+SD_pr > 1.5,mean_pr+SD_pr,0)
    small_pr_flag = np.where(np.maximum(mean_pr,SD_pr)<0.3,(1-np.maximum(mean_pr,SD_pr)),0)
    
    sm_SD_pr_flag = np.where(mean_pr-SD_pr>0.1,1,0)
    
    ans = mean*0.7 + SD*(0.75) + np.maximum(SD_pr-mean_pr,0)*SD*(1/0.09) + large_pr_flag*SD*0.5 - small_pr_flag*SD*0.6 - sm_SD_pr_flag*SD*0.03


    return np.maximum(ans,mean)


def save_model(model):
	"""Saves this trained model to a file.

	This is used to save the model after training, so that it can be used for prediction later.

	Do not touch this unless necessary (if you need specific features). If you do, do not
	 forget to update the load_model method to be compatible.

	Parameters
	----------
	model: a Python object that describes your model. This can be anything, as long
	    as it is consistent with what `fit` outpurs."""

	with open('trained_model.pickle', 'wb') as target:
		pickle.dump(model, target)




def load_model():
	"""Load a saved trained model from the file.

	   This is called by the server to evaluate your submission on hidden data.
	   Only modify this *if* you modified save_model."""

	with open('trained_model.pickle', 'rb') as target:
		trained_model = pickle.load(target)
	return trained_model
